services:
#  zookeeper:
#    image: confluentinc/cp-zookeeper:latest
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    ports:
#      - "2181:2181"
#    networks:
#      - kafka-network
#
#  kafka:
#    image: confluentinc/cp-kafka:latest
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
#      KAFKA_LOG_RETENTION_HOURS: 1
#      KAFKA_LOG_RETENTION_BYTES: 1073741824
#    networks:
#      - kafka-network
#    healthcheck:
#      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:9092 --list"]
#      interval: 10s
#      timeout: 10s
#      retries: 5
#
#  kafka-ui:
#    image: provectuslabs/kafka-ui:latest
#    depends_on:
#      - kafka
#    ports:
#      - "8080:8080"
#    environment:
#      KAFKA_CLUSTERS_0_NAME: local
#      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 192.168.0.57:9092
#    networks:
#      - kafka-network

  python-producer:
    build:
      context: ./py
      dockerfile: Dockerfile
#    depends_on:
#      kafka:
#        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=192.168.0.57:9092
      - KAFKA_TOPIC=upbit-krw-ticker-py
      - TEST_DURATION=60
      - PRODUCER_ID=python
      - PYTHONUNBUFFERED=1
    volumes:
      - ./reports:/app/reports
    networks:
      - kafka-network
    restart: "no"

  go-producer:
    build:
      context: ./go
      dockerfile: Dockerfile
    depends_on:
      - python-producer
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=192.168.0.57:9092
      - KAFKA_TOPIC=upbit-krw-ticker-go
      - TEST_DURATION=60
      - PRODUCER_ID=go
    volumes:
      - ./reports:/app/reports
    networks:
      - kafka-network
    restart: "no"

  analyzer:
    build:
      context: ./analyzer
      dockerfile: Dockerfile
    depends_on:
      - python-producer
      - go-producer
    volumes:
      - ./reports:/app/reports
      - ./charts:/app/charts
    networks:
      - kafka-network
    restart: "no"

networks:
  kafka-network:
    driver: bridge

volumes:
  kafka-data:
  zookeeper-data: